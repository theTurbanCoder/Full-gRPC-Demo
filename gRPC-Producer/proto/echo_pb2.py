# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/echo.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='proto/echo.proto',
  package='fullDuplexTest',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x10proto/echo.proto\x12\x0e\x66ullDuplexTest\"+\n\tTimestamp\x12\x0f\n\x07seconds\x18\x01 \x01(\x03\x12\r\n\x05nanos\x18\x02 \x01(\x05\"\x1e\n\x0b\x45\x63hoRequest\x12\x0f\n\x07message\x18\x01 \x01(\t\"\x1f\n\x0c\x45\x63hoResponse\x12\x0f\n\x07message\x18\x01 \x01(\t\"u\n\x11\x46ullDuplexRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05\x63hunk\x18\x02 \x01(\x0c\x12\x30\n\rgeneratedTime\x18\x03 \x01(\x0b\x32\x19.fullDuplexTest.Timestamp\x12\x11\n\tTimeOfDay\x18\x04 \x01(\t\"\"\n\x12\x46ullDuplexResponse\x12\x0c\n\x04name\x18\x01 \x01(\t2\xf6\x01\n\x11TestDuplexService\x12\x41\n\x04\x45\x63ho\x12\x1b.fullDuplexTest.EchoRequest\x1a\x1c.fullDuplexTest.EchoResponse\x12O\n\x03\x42id\x12!.fullDuplexTest.FullDuplexRequest\x1a!.fullDuplexTest.FullDuplexRequest(\x01\x30\x01\x12M\n\x04send\x12!.fullDuplexTest.FullDuplexRequest\x1a\".fullDuplexTest.FullDuplexResponseb\x06proto3')
)




_TIMESTAMP = _descriptor.Descriptor(
  name='Timestamp',
  full_name='fullDuplexTest.Timestamp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='seconds', full_name='fullDuplexTest.Timestamp.seconds', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='nanos', full_name='fullDuplexTest.Timestamp.nanos', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=79,
)


_ECHOREQUEST = _descriptor.Descriptor(
  name='EchoRequest',
  full_name='fullDuplexTest.EchoRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='fullDuplexTest.EchoRequest.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=81,
  serialized_end=111,
)


_ECHORESPONSE = _descriptor.Descriptor(
  name='EchoResponse',
  full_name='fullDuplexTest.EchoResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='fullDuplexTest.EchoResponse.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=113,
  serialized_end=144,
)


_FULLDUPLEXREQUEST = _descriptor.Descriptor(
  name='FullDuplexRequest',
  full_name='fullDuplexTest.FullDuplexRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='fullDuplexTest.FullDuplexRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='chunk', full_name='fullDuplexTest.FullDuplexRequest.chunk', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='generatedTime', full_name='fullDuplexTest.FullDuplexRequest.generatedTime', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='TimeOfDay', full_name='fullDuplexTest.FullDuplexRequest.TimeOfDay', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=146,
  serialized_end=263,
)


_FULLDUPLEXRESPONSE = _descriptor.Descriptor(
  name='FullDuplexResponse',
  full_name='fullDuplexTest.FullDuplexResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='fullDuplexTest.FullDuplexResponse.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=265,
  serialized_end=299,
)

_FULLDUPLEXREQUEST.fields_by_name['generatedTime'].message_type = _TIMESTAMP
DESCRIPTOR.message_types_by_name['Timestamp'] = _TIMESTAMP
DESCRIPTOR.message_types_by_name['EchoRequest'] = _ECHOREQUEST
DESCRIPTOR.message_types_by_name['EchoResponse'] = _ECHORESPONSE
DESCRIPTOR.message_types_by_name['FullDuplexRequest'] = _FULLDUPLEXREQUEST
DESCRIPTOR.message_types_by_name['FullDuplexResponse'] = _FULLDUPLEXRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Timestamp = _reflection.GeneratedProtocolMessageType('Timestamp', (_message.Message,), dict(
  DESCRIPTOR = _TIMESTAMP,
  __module__ = 'proto.echo_pb2'
  # @@protoc_insertion_point(class_scope:fullDuplexTest.Timestamp)
  ))
_sym_db.RegisterMessage(Timestamp)

EchoRequest = _reflection.GeneratedProtocolMessageType('EchoRequest', (_message.Message,), dict(
  DESCRIPTOR = _ECHOREQUEST,
  __module__ = 'proto.echo_pb2'
  # @@protoc_insertion_point(class_scope:fullDuplexTest.EchoRequest)
  ))
_sym_db.RegisterMessage(EchoRequest)

EchoResponse = _reflection.GeneratedProtocolMessageType('EchoResponse', (_message.Message,), dict(
  DESCRIPTOR = _ECHORESPONSE,
  __module__ = 'proto.echo_pb2'
  # @@protoc_insertion_point(class_scope:fullDuplexTest.EchoResponse)
  ))
_sym_db.RegisterMessage(EchoResponse)

FullDuplexRequest = _reflection.GeneratedProtocolMessageType('FullDuplexRequest', (_message.Message,), dict(
  DESCRIPTOR = _FULLDUPLEXREQUEST,
  __module__ = 'proto.echo_pb2'
  # @@protoc_insertion_point(class_scope:fullDuplexTest.FullDuplexRequest)
  ))
_sym_db.RegisterMessage(FullDuplexRequest)

FullDuplexResponse = _reflection.GeneratedProtocolMessageType('FullDuplexResponse', (_message.Message,), dict(
  DESCRIPTOR = _FULLDUPLEXRESPONSE,
  __module__ = 'proto.echo_pb2'
  # @@protoc_insertion_point(class_scope:fullDuplexTest.FullDuplexResponse)
  ))
_sym_db.RegisterMessage(FullDuplexResponse)



_TESTDUPLEXSERVICE = _descriptor.ServiceDescriptor(
  name='TestDuplexService',
  full_name='fullDuplexTest.TestDuplexService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=302,
  serialized_end=548,
  methods=[
  _descriptor.MethodDescriptor(
    name='Echo',
    full_name='fullDuplexTest.TestDuplexService.Echo',
    index=0,
    containing_service=None,
    input_type=_ECHOREQUEST,
    output_type=_ECHORESPONSE,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='Bid',
    full_name='fullDuplexTest.TestDuplexService.Bid',
    index=1,
    containing_service=None,
    input_type=_FULLDUPLEXREQUEST,
    output_type=_FULLDUPLEXREQUEST,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='send',
    full_name='fullDuplexTest.TestDuplexService.send',
    index=2,
    containing_service=None,
    input_type=_FULLDUPLEXREQUEST,
    output_type=_FULLDUPLEXRESPONSE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_TESTDUPLEXSERVICE)

DESCRIPTOR.services_by_name['TestDuplexService'] = _TESTDUPLEXSERVICE

# @@protoc_insertion_point(module_scope)
